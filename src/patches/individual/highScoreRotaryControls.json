[
	{
		"patchDescription": "Have high score entry use rotary controls"
	},
	{
		"type": "prom",
		"description": "Make the timer countdown start at 99 instead of 20, to allow more time",
		"address": "208ec",
		"patchAsm": [
			";; this is how long the high score screen will allow name input. Normally it is 20 seconds.",
			";; this value is in frames, 5940 / 60 = 99 seconds",
			";; the game's code is just 'move.w #1200, $1c(a4)' for 20 seconds",
			"move.w #5940, $1c(a4)"
		]
	},
	{
		"type": "prom",
		"description": "Have the high score input routine not skip if no input is detected",
		"address": "20cea",
		"patchAsm": [
			";;; normally if there is no input detected, the high score entry input routine will just bail.",
			";;; but no input just means 'angle zero' in rotary mode. So it is important to skip this check",
			"jmp $20d40"
		]
	},
	{
		"type": "prom",
		"description": "Have the high score input routine jump to our subroutine which sets pending letter based on rotary",
		"address": "20d40",
		"subroutine": true,
		"patchAsm": [
			"clr.l d1",
			"move.b $10fdb6, d0; load BIOS_PLAYER_MOD1 to see if p1 is playing",
			"beq loadP2current ; zero? then p2 is playing",
			"move.b $10fd96, d0 ; load BIOS_P1CURRENT",
			"move.b $108e02, d2 ; load the p1 input type toggle. 0 = rotary, 1 = joystick",
			"bra doneLoadCurrent",
			"loadP2current:",
			"move.b $10fd9c, d0 ; load BIOS_P2CURRENT",
			"move.b $108f02, d2 ; load the p2 input type toggle. 0 = rotary, 1 = joystick",
			"doneLoadCurrent:",

			"cmpi.b #0, d2 ; is the player currently using rotary?",
			"bne handleJoystick",

			";;;; rotary controls",
			";;;; this is pretty much an exact copy of the rotary decoding in the main gameplay input routines",
			"move.b d0, d1 ; copy input into d1",
			"move.b d0, d2 ; copy input into d2",

			";;;; get rid of D, place BC in the right spot",
			"andi.b #$7f, d0 ; turn the D bit off, it is for sign and we are only calc'ing a positive angle right now",
			"lsr.b #5, d0 ; shift it down by 5 to get BC all by itself",
			"lsl.b #4, d0 ; then shift BC back up into the higher nibble, to make room for RLDU",

			"andi.b #$f, d1 ; take the copy of input in d1, and throw away everything but RLDU",
			"add.b d0, d1 ; d1 is now CBRLDU, which is the positive angle we want, up to 63",

			"cmpi.b #60, D1 ; compare D1 to 60",
			"ble.s skipUpperClamp60 ; is it less than 61? no need to apply upper clamp",
			"move.b #60, D1 ; it is too big, clamp it down to 60",
			"skipUpperClamp60:",

			";;;; at this point D1 is (0,60), ie positive angles, and d2 is the original input",
			"btst #7, D2 ; see if D was set",
			"beq skipNegation; not set, no need to negate",
			"muls #-1,d1 ; negation asked for, multiply angle by -1",
			"skipNegation:",

			";;; from here on out is specific stuff for high score",
			"addi.b #60, D1 ; map D1 from (-60,60) -> (0,120)",
			"cmpi.b #119, D1 ; compare D1 to 119, as 120 is one too big because 120/3 = 40, one above the max",
			"ble.s skipUpperClamp119 ; is it less than 120? no need to apply upper clamp",
			"move.b #119, D1 ; it is too big, clamp it down to 119",
			"skipUpperClamp119:",

			"andi.l #$000000ff, d1 ; wipe out D1 above the byte, forcing the byte to become positive",
			"divu.w #3, D1 ; divide d1 which is now (0,119) by 3, accomplishing (0,39) how many characters the high score",
			";;; screen offers. So each angle on the rotary dial is one letter",

			"move.b D1, $105a89 ; store the pending letter that we just determined where the game expects it",
			";;; the game will take this value and run with it, enabling rotary controls on high score name input",
			"bra done",

			";;;;;; due to how this code was injected, cleanly just having the game work normally when in joystick mode",
			";;;;;; was difficult. I broke down and just did joystick input on my own here. This mimics what the non-hacked",
			";;;;;; game does. Note that I only do this for high score input. When in joystick mode, gameplay is truly using",
			";;;;;; the original code, which I think is important",
			"handleJoystick:",
			"cmpi.b #0, d0 ; is there no input?",
			"beq done ; then just bail",
			"subi.b #1, $108fa0 ; decrement the throttle counter, without a throttle letters go by too fast",
			"bmi updateBasedOnJoystick ; did it go negative? let an input through",
			"bra done ; not negative? ignore input to let the throttle work",
			"updateBasedOnJoystick:",
			"move.b #3, $108fa0 ; re-arm the throttle",
			"move.b $105a89, d1 ; load the current pending letter",
			"btst #2, d0 ; is left pressed?",
			"beq handleRight ; if not, jump to right",
			"cmpi.b #0, d1 ; is the current pending letter at zero?",
			"bne decrement ; if it is not, we can just decement it",
			"move.b #39, d1 ; otherwise wrap it around to the max value",
			"bra jsdone",
			"handleRight:",
			"cmpi.b #39, d1; is the current pending letter at the max?",
			"bne increment ; if it is not, we can increment it",
			"move.b #0, d1 ; otherwise, wrap it around to the min value",
			"bra jsdone",
			"decrement:",
			"subi.b #1, d1",
			"bra jsdone",
			"increment:",
			"addi.b #1, d1",

			"jsdone:",
			"move.b d1, $105a89",

			"done:",
			"rts"
		]
	},
	{
		"type": "prom",
		"description": "Once we return from our subroutine, the original routine needs to skip past its input handling",
		"address": "20d46",
		"patchAsm": ["jmp $20d6c"]
	}
]
